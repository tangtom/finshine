package com.finshine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.finshine.dao.EAnnualIncomExpend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EANNUAL_INCOM_EXPEND.
*/
public class EAnnualIncomExpendDao extends AbstractDao<EAnnualIncomExpend, Long> {

    public static final String TABLENAME = "EANNUAL_INCOM_EXPEND";

    /**
     * Properties of entity EAnnualIncomExpend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AnnualincomexpendId = new Property(1, Long.class, "annualincomexpendId", false, "annualincomexpendId");
        public final static Property CustomerId = new Property(2, Long.class, "customerId", false, "customerId");
        public final static Property Income = new Property(3, Long.class, "income", false, "customerId");
        public final static Property SpouseIncome = new Property(4, Long.class, "spouseIncome", false, "spouseIncome");
        public final static Property EndBonus = new Property(5, Long.class, "endBonus", false, "endBonus");
        public final static Property Rental = new Property(6, Long.class, "rental", false, "rental");
        public final static Property Interest = new Property(7, Long.class, "interest", false, "interest");
        public final static Property Dividends = new Property(8, Long.class, "dividends", false, "dividends");
        public final static Property OtherDividends = new Property(9, Long.class, "otherDividends", false, "otherDividends");
        public final static Property OtherFixIncome = new Property(10, Long.class, "otherFixIncome", false, "otherFixIncome");
        public final static Property OtherUnfixIncome = new Property(11, Long.class, "otherUnfixIncome", false, "otherUnfixIncome");
        public final static Property TotalIncome = new Property(12, Long.class, "totalIncome", false, "totalIncome");
        public final static Property LivingCost = new Property(13, Long.class, "livingCost", false, "livingCost");
        public final static Property HousExpense = new Property(14, Long.class, "housExpense", false, "housExpense");
        public final static Property MedicExpense = new Property(15, Long.class, "medicExpense", false, "medicExpense");
        public final static Property EduExpense = new Property(16, Long.class, "eduExpense", false, "eduExpense");
        public final static Property Insurance = new Property(17, Long.class, "insurance", false, "insurance");
        public final static Property Travel = new Property(18, Long.class, "travel", false, "travel");
        public final static Property Alimony = new Property(19, Long.class, "alimony", false, "alimony");
        public final static Property OtherFixExpense = new Property(20, Long.class, "otherFixExpense", false, "otherFixExpense");
        public final static Property OtherUnfixExpense = new Property(21, Long.class, "otherUnfixExpense", false, "otherUnfixExpense");
        public final static Property TotalExpenditure = new Property(22, Long.class, "totalExpenditure", false, "totalExpenditure");
        public final static Property AnnualBalance = new Property(23, Long.class, "annualBalance", false, "annualBalance");
        public final static Property HistoryExperience = new Property(24, String.class, "historyExperience", false, "historyExperience");
    };


    public EAnnualIncomExpendDao(DaoConfig config) {
        super(config);
    }
    
    public EAnnualIncomExpendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EANNUAL_INCOM_EXPEND' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'annualincomexpendId' INTEGER," + // 1: annualincomexpendId
                "'customerId' INTEGER," + // 2: customerId
                "'customerId' INTEGER," + // 3: income
                "'spouseIncome' INTEGER," + // 4: spouseIncome
                "'endBonus' INTEGER," + // 5: endBonus
                "'rental' INTEGER," + // 6: rental
                "'interest' INTEGER," + // 7: interest
                "'dividends' INTEGER," + // 8: dividends
                "'otherDividends' INTEGER," + // 9: otherDividends
                "'otherFixIncome' INTEGER," + // 10: otherFixIncome
                "'otherUnfixIncome' INTEGER," + // 11: otherUnfixIncome
                "'totalIncome' INTEGER," + // 12: totalIncome
                "'livingCost' INTEGER," + // 13: livingCost
                "'housExpense' INTEGER," + // 14: housExpense
                "'medicExpense' INTEGER," + // 15: medicExpense
                "'eduExpense' INTEGER," + // 16: eduExpense
                "'insurance' INTEGER," + // 17: insurance
                "'travel' INTEGER," + // 18: travel
                "'alimony' INTEGER," + // 19: alimony
                "'otherFixExpense' INTEGER," + // 20: otherFixExpense
                "'otherUnfixExpense' INTEGER," + // 21: otherUnfixExpense
                "'totalExpenditure' INTEGER," + // 22: totalExpenditure
                "'annualBalance' INTEGER," + // 23: annualBalance
                "'historyExperience' TEXT);"); // 24: historyExperience
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EANNUAL_INCOM_EXPEND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EAnnualIncomExpend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long annualincomexpendId = entity.getAnnualincomexpendId();
        if (annualincomexpendId != null) {
            stmt.bindLong(2, annualincomexpendId);
        }
 
        Long customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindLong(3, customerId);
        }
 
        Long income = entity.getIncome();
        if (income != null) {
            stmt.bindLong(4, income);
        }
 
        Long spouseIncome = entity.getSpouseIncome();
        if (spouseIncome != null) {
            stmt.bindLong(5, spouseIncome);
        }
 
        Long endBonus = entity.getEndBonus();
        if (endBonus != null) {
            stmt.bindLong(6, endBonus);
        }
 
        Long rental = entity.getRental();
        if (rental != null) {
            stmt.bindLong(7, rental);
        }
 
        Long interest = entity.getInterest();
        if (interest != null) {
            stmt.bindLong(8, interest);
        }
 
        Long dividends = entity.getDividends();
        if (dividends != null) {
            stmt.bindLong(9, dividends);
        }
 
        Long otherDividends = entity.getOtherDividends();
        if (otherDividends != null) {
            stmt.bindLong(10, otherDividends);
        }
 
        Long otherFixIncome = entity.getOtherFixIncome();
        if (otherFixIncome != null) {
            stmt.bindLong(11, otherFixIncome);
        }
 
        Long otherUnfixIncome = entity.getOtherUnfixIncome();
        if (otherUnfixIncome != null) {
            stmt.bindLong(12, otherUnfixIncome);
        }
 
        Long totalIncome = entity.getTotalIncome();
        if (totalIncome != null) {
            stmt.bindLong(13, totalIncome);
        }
 
        Long livingCost = entity.getLivingCost();
        if (livingCost != null) {
            stmt.bindLong(14, livingCost);
        }
 
        Long housExpense = entity.getHousExpense();
        if (housExpense != null) {
            stmt.bindLong(15, housExpense);
        }
 
        Long medicExpense = entity.getMedicExpense();
        if (medicExpense != null) {
            stmt.bindLong(16, medicExpense);
        }
 
        Long eduExpense = entity.getEduExpense();
        if (eduExpense != null) {
            stmt.bindLong(17, eduExpense);
        }
 
        Long insurance = entity.getInsurance();
        if (insurance != null) {
            stmt.bindLong(18, insurance);
        }
 
        Long travel = entity.getTravel();
        if (travel != null) {
            stmt.bindLong(19, travel);
        }
 
        Long alimony = entity.getAlimony();
        if (alimony != null) {
            stmt.bindLong(20, alimony);
        }
 
        Long otherFixExpense = entity.getOtherFixExpense();
        if (otherFixExpense != null) {
            stmt.bindLong(21, otherFixExpense);
        }
 
        Long otherUnfixExpense = entity.getOtherUnfixExpense();
        if (otherUnfixExpense != null) {
            stmt.bindLong(22, otherUnfixExpense);
        }
 
        Long totalExpenditure = entity.getTotalExpenditure();
        if (totalExpenditure != null) {
            stmt.bindLong(23, totalExpenditure);
        }
 
        Long annualBalance = entity.getAnnualBalance();
        if (annualBalance != null) {
            stmt.bindLong(24, annualBalance);
        }
 
        String historyExperience = entity.getHistoryExperience();
        if (historyExperience != null) {
            stmt.bindString(25, historyExperience);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EAnnualIncomExpend readEntity(Cursor cursor, int offset) {
        EAnnualIncomExpend entity = new EAnnualIncomExpend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // annualincomexpendId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // customerId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // income
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // spouseIncome
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // endBonus
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // rental
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // interest
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // dividends
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // otherDividends
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // otherFixIncome
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // otherUnfixIncome
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // totalIncome
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // livingCost
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // housExpense
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // medicExpense
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // eduExpense
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // insurance
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // travel
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // alimony
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // otherFixExpense
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // otherUnfixExpense
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // totalExpenditure
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // annualBalance
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // historyExperience
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EAnnualIncomExpend entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAnnualincomexpendId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCustomerId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIncome(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSpouseIncome(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEndBonus(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setRental(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setInterest(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDividends(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setOtherDividends(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setOtherFixIncome(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setOtherUnfixIncome(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setTotalIncome(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setLivingCost(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setHousExpense(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setMedicExpense(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setEduExpense(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setInsurance(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setTravel(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setAlimony(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setOtherFixExpense(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setOtherUnfixExpense(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setTotalExpenditure(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setAnnualBalance(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
        entity.setHistoryExperience(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EAnnualIncomExpend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EAnnualIncomExpend entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
