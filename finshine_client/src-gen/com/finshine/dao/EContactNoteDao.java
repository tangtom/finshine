package com.finshine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.finshine.dao.EContactNote;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ECONTACT_NOTE.
*/
public class EContactNoteDao extends AbstractDao<EContactNote, Long> {

    public static final String TABLENAME = "ECONTACT_NOTE";

    /**
     * Properties of entity EContactNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContactNoteId = new Property(1, Long.class, "contactNoteId", false, "contactNoteId");
        public final static Property CustomerId = new Property(2, Long.class, "customerId", false, "customerId");
        public final static Property SalesId = new Property(3, Long.class, "salesId", false, "salesId");
        public final static Property ContactDate = new Property(4, Long.class, "contactDate", false, "contactDate");
        public final static Property Title = new Property(5, String.class, "title", false, "title");
        public final static Property Content = new Property(6, Long.class, "content", false, "content");
    };


    public EContactNoteDao(DaoConfig config) {
        super(config);
    }
    
    public EContactNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ECONTACT_NOTE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'contactNoteId' INTEGER," + // 1: contactNoteId
                "'customerId' INTEGER," + // 2: customerId
                "'salesId' INTEGER," + // 3: salesId
                "'contactDate' INTEGER," + // 4: contactDate
                "'title' TEXT," + // 5: title
                "'content' INTEGER);"); // 6: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ECONTACT_NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EContactNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long contactNoteId = entity.getContactNoteId();
        if (contactNoteId != null) {
            stmt.bindLong(2, contactNoteId);
        }
 
        Long customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindLong(3, customerId);
        }
 
        Long salesId = entity.getSalesId();
        if (salesId != null) {
            stmt.bindLong(4, salesId);
        }
 
        Long contactDate = entity.getContactDate();
        if (contactDate != null) {
            stmt.bindLong(5, contactDate);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        Long content = entity.getContent();
        if (content != null) {
            stmt.bindLong(7, content);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EContactNote readEntity(Cursor cursor, int offset) {
        EContactNote entity = new EContactNote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // contactNoteId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // customerId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // salesId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // contactDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // content
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EContactNote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContactNoteId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCustomerId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSalesId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setContactDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EContactNote entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EContactNote entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
