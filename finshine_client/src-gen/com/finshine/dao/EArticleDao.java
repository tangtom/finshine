package com.finshine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.finshine.dao.EArticle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EARTICLE.
*/
public class EArticleDao extends AbstractDao<EArticle, Long> {

    public static final String TABLENAME = "EARTICLE";

    /**
     * Properties of entity EArticle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ArticleId = new Property(1, Long.class, "articleId", false, "articleId");
        public final static Property Title = new Property(2, String.class, "title", false, "title");
        public final static Property PostTime = new Property(3, Long.class, "postTime", false, "postTime");
        public final static Property Created = new Property(4, Long.class, "created", false, "created");
        public final static Property Lastmod = new Property(5, Long.class, "lastmod", false, "lastmod");
        public final static Property Resource = new Property(6, String.class, "resource", false, "resource");
        public final static Property Author = new Property(7, String.class, "author", false, "author");
        public final static Property Content = new Property(8, String.class, "content", false, "content");
        public final static Property Status = new Property(9, String.class, "status", false, "status");
    };


    public EArticleDao(DaoConfig config) {
        super(config);
    }
    
    public EArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EARTICLE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'articleId' INTEGER," + // 1: articleId
                "'title' TEXT," + // 2: title
                "'postTime' INTEGER," + // 3: postTime
                "'created' INTEGER," + // 4: created
                "'lastmod' INTEGER," + // 5: lastmod
                "'resource' TEXT," + // 6: resource
                "'author' TEXT," + // 7: author
                "'content' TEXT," + // 8: content
                "'status' TEXT);"); // 9: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EArticle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindLong(2, articleId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        Long postTime = entity.getPostTime();
        if (postTime != null) {
            stmt.bindLong(4, postTime);
        }
 
        Long created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(5, created);
        }
 
        Long lastmod = entity.getLastmod();
        if (lastmod != null) {
            stmt.bindLong(6, lastmod);
        }
 
        String resource = entity.getResource();
        if (resource != null) {
            stmt.bindString(7, resource);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(8, author);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EArticle readEntity(Cursor cursor, int offset) {
        EArticle entity = new EArticle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // articleId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // postTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // created
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // lastmod
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // resource
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // author
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EArticle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticleId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPostTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCreated(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLastmod(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setResource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAuthor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EArticle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EArticle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
