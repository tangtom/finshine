package com.finshine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.finshine.dao.ECustomer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ECUSTOMER.
*/
public class ECustomerDao extends AbstractDao<ECustomer, Long> {

    public static final String TABLENAME = "ECUSTOMER";

    /**
     * Properties of entity ECustomer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Age = new Property(1, Integer.class, "age", false, "age");
        public final static Property AnnualIncome = new Property(2, Long.class, "annualIncome", false, "annualIncome");
        public final static Property BillType = new Property(3, Integer.class, "billType", false, "billType");
        public final static Property Birthday = new Property(4, Long.class, "birthday", false, "birthday");
        public final static Property City = new Property(5, String.class, "city", false, "city");
        public final static Property ContactAddress = new Property(6, String.class, "contactAddress", false, "contactAddress");
        public final static Property Country = new Property(7, String.class, "country", false, "country");
        public final static Property CurrentInvestValue = new Property(8, Long.class, "currentInvestValue", false, "currentInvestValue");
        public final static Property Diploma = new Property(9, Integer.class, "diploma", false, "diploma");
        public final static Property District = new Property(10, String.class, "district", false, "district");
        public final static Property Email1 = new Property(11, String.class, "email1", false, "email1");
        public final static Property Email2 = new Property(12, String.class, "email2", false, "email2");
        public final static Property Employer = new Property(13, String.class, "employer", false, "employer");
        public final static Property Fax = new Property(14, String.class, "fax", false, "fax");
        public final static Property Gender = new Property(15, Integer.class, "gender", false, "gender");
        public final static Property IDNumber = new Property(16, String.class, "IDNumber", false, "IDNumber");
        public final static Property IDValid = new Property(17, java.util.Date.class, "IDValid", false, "IDValid");
        public final static Property Industry = new Property(18, String.class, "industry", false, "industry");
        public final static Property InvestNumber = new Property(19, String.class, "investNumber", false, "investNumber");
        public final static Property InvestPreference = new Property(20, String.class, "investPreference", false, "investPreference");
        public final static Property InvestSource = new Property(21, String.class, "investSource", false, "investSource");
        public final static Property Keyword = new Property(22, String.class, "keyword", false, "keyword");
        public final static Property MaritalStatus = new Property(23, Integer.class, "maritalStatus", false, "maritalStatus");
        public final static Property Name = new Property(24, String.class, "name", false, "name");
        public final static Property Nationality = new Property(25, String.class, "nationality", false, "nationality");
        public final static Property NickName = new Property(26, String.class, "nickName", false, "nickName");
        public final static Property PassportEntryTime = new Property(27, java.util.Date.class, "passportEntryTime", false, "passportEntryTime");
        public final static Property PeakInvestValue = new Property(28, Long.class, "peakInvestValue", false, "peakInvestValue");
        public final static Property Position = new Property(29, String.class, "position", false, "position");
        public final static Property Job = new Property(30, String.class, "job", false, "job");
        public final static Property Profit = new Property(31, Long.class, "profit", false, "profit");
        public final static Property Province = new Property(32, String.class, "province", false, "province");
        public final static Property ResidentialAddress = new Property(33, String.class, "residentialAddress", false, "residentialAddress");
        public final static Property Telephone = new Property(34, String.class, "telephone", false, "telephone");
        public final static Property Zipcode = new Property(35, String.class, "zipcode", false, "zipcode");
        public final static Property Idtype = new Property(36, Integer.class, "idtype", false, "idtype");
        public final static Property CustomerId = new Property(37, Long.class, "customerId", false, "customerId");
        public final static Property SalesId = new Property(38, String.class, "salesId", false, "salesId");
    };


    public ECustomerDao(DaoConfig config) {
        super(config);
    }
    
    public ECustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ECUSTOMER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'age' INTEGER," + // 1: age
                "'annualIncome' INTEGER," + // 2: annualIncome
                "'billType' INTEGER," + // 3: billType
                "'birthday' INTEGER," + // 4: birthday
                "'city' TEXT," + // 5: city
                "'contactAddress' TEXT," + // 6: contactAddress
                "'country' TEXT," + // 7: country
                "'currentInvestValue' INTEGER," + // 8: currentInvestValue
                "'diploma' INTEGER," + // 9: diploma
                "'district' TEXT," + // 10: district
                "'email1' TEXT," + // 11: email1
                "'email2' TEXT," + // 12: email2
                "'employer' TEXT," + // 13: employer
                "'fax' TEXT," + // 14: fax
                "'gender' INTEGER," + // 15: gender
                "'IDNumber' TEXT," + // 16: IDNumber
                "'IDValid' INTEGER," + // 17: IDValid
                "'industry' TEXT," + // 18: industry
                "'investNumber' TEXT," + // 19: investNumber
                "'investPreference' TEXT," + // 20: investPreference
                "'investSource' TEXT," + // 21: investSource
                "'keyword' TEXT," + // 22: keyword
                "'maritalStatus' INTEGER," + // 23: maritalStatus
                "'name' TEXT," + // 24: name
                "'nationality' TEXT," + // 25: nationality
                "'nickName' TEXT," + // 26: nickName
                "'passportEntryTime' INTEGER," + // 27: passportEntryTime
                "'peakInvestValue' INTEGER," + // 28: peakInvestValue
                "'position' TEXT," + // 29: position
                "'job' TEXT," + // 30: job
                "'profit' INTEGER," + // 31: profit
                "'province' TEXT," + // 32: province
                "'residentialAddress' TEXT," + // 33: residentialAddress
                "'telephone' TEXT," + // 34: telephone
                "'zipcode' TEXT," + // 35: zipcode
                "'idtype' INTEGER," + // 36: idtype
                "'customerId' INTEGER," + // 37: customerId
                "'salesId' TEXT);"); // 38: salesId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ECUSTOMER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ECustomer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(2, age);
        }
 
        Long annualIncome = entity.getAnnualIncome();
        if (annualIncome != null) {
            stmt.bindLong(3, annualIncome);
        }
 
        Integer billType = entity.getBillType();
        if (billType != null) {
            stmt.bindLong(4, billType);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(5, birthday);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String contactAddress = entity.getContactAddress();
        if (contactAddress != null) {
            stmt.bindString(7, contactAddress);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(8, country);
        }
 
        Long currentInvestValue = entity.getCurrentInvestValue();
        if (currentInvestValue != null) {
            stmt.bindLong(9, currentInvestValue);
        }
 
        Integer diploma = entity.getDiploma();
        if (diploma != null) {
            stmt.bindLong(10, diploma);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(11, district);
        }
 
        String email1 = entity.getEmail1();
        if (email1 != null) {
            stmt.bindString(12, email1);
        }
 
        String email2 = entity.getEmail2();
        if (email2 != null) {
            stmt.bindString(13, email2);
        }
 
        String employer = entity.getEmployer();
        if (employer != null) {
            stmt.bindString(14, employer);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(15, fax);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(16, gender);
        }
 
        String IDNumber = entity.getIDNumber();
        if (IDNumber != null) {
            stmt.bindString(17, IDNumber);
        }
 
        java.util.Date IDValid = entity.getIDValid();
        if (IDValid != null) {
            stmt.bindLong(18, IDValid.getTime());
        }
 
        String industry = entity.getIndustry();
        if (industry != null) {
            stmt.bindString(19, industry);
        }
 
        String investNumber = entity.getInvestNumber();
        if (investNumber != null) {
            stmt.bindString(20, investNumber);
        }
 
        String investPreference = entity.getInvestPreference();
        if (investPreference != null) {
            stmt.bindString(21, investPreference);
        }
 
        String investSource = entity.getInvestSource();
        if (investSource != null) {
            stmt.bindString(22, investSource);
        }
 
        String keyword = entity.getKeyword();
        if (keyword != null) {
            stmt.bindString(23, keyword);
        }
 
        Integer maritalStatus = entity.getMaritalStatus();
        if (maritalStatus != null) {
            stmt.bindLong(24, maritalStatus);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(25, name);
        }
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(26, nationality);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(27, nickName);
        }
 
        java.util.Date passportEntryTime = entity.getPassportEntryTime();
        if (passportEntryTime != null) {
            stmt.bindLong(28, passportEntryTime.getTime());
        }
 
        Long peakInvestValue = entity.getPeakInvestValue();
        if (peakInvestValue != null) {
            stmt.bindLong(29, peakInvestValue);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(30, position);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(31, job);
        }
 
        Long profit = entity.getProfit();
        if (profit != null) {
            stmt.bindLong(32, profit);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(33, province);
        }
 
        String residentialAddress = entity.getResidentialAddress();
        if (residentialAddress != null) {
            stmt.bindString(34, residentialAddress);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(35, telephone);
        }
 
        String zipcode = entity.getZipcode();
        if (zipcode != null) {
            stmt.bindString(36, zipcode);
        }
 
        Integer idtype = entity.getIdtype();
        if (idtype != null) {
            stmt.bindLong(37, idtype);
        }
 
        Long customerId = entity.getCustomerId();
        if (customerId != null) {
            stmt.bindLong(38, customerId);
        }
 
        String salesId = entity.getSalesId();
        if (salesId != null) {
            stmt.bindString(39, salesId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ECustomer readEntity(Cursor cursor, int offset) {
        ECustomer entity = new ECustomer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // age
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // annualIncome
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // billType
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contactAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // country
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // currentInvestValue
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // diploma
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // district
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // email1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // email2
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // employer
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fax
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // gender
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // IDNumber
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // IDValid
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // industry
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // investNumber
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // investPreference
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // investSource
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // keyword
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // maritalStatus
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // name
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // nationality
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // nickName
            cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)), // passportEntryTime
            cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28), // peakInvestValue
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // position
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // job
            cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31), // profit
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // province
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // residentialAddress
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // telephone
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // zipcode
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // idtype
            cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37), // customerId
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38) // salesId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ECustomer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAge(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAnnualIncome(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBillType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContactAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCountry(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCurrentInvestValue(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setDiploma(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDistrict(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmail1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmail2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEmployer(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFax(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGender(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIDNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIDValid(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setIndustry(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setInvestNumber(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setInvestPreference(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setInvestSource(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setKeyword(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMaritalStatus(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setNationality(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setNickName(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPassportEntryTime(cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)));
        entity.setPeakInvestValue(cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28));
        entity.setPosition(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setJob(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setProfit(cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31));
        entity.setProvince(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setResidentialAddress(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setTelephone(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setZipcode(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setIdtype(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setCustomerId(cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37));
        entity.setSalesId(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ECustomer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ECustomer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
