package com.finshine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.finshine.dao.EProductSearch;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EPRODUCT_SEARCH.
*/
public class EProductSearchDao extends AbstractDao<EProductSearch, Long> {

    public static final String TABLENAME = "EPRODUCT_SEARCH";

    /**
     * Properties of entity EProductSearch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SearchProdName = new Property(1, String.class, "searchProdName", false, "searchProdName");
        public final static Property SearchProdOnDateTime = new Property(2, String.class, "searchProdOnDateTime", false, "searchProdOnDateTime");
        public final static Property SearchProdEnDateTime = new Property(3, String.class, "searchProdEnDateTime", false, "searchProdEnDateTime");
        public final static Property SearchProdFirstType = new Property(4, String.class, "searchProdFirstType", false, "searchProdFirstType");
        public final static Property SearchProdSecondtype = new Property(5, String.class, "searchProdSecondtype", false, "searchProdSecondtype");
        public final static Property SearchProdStatus = new Property(6, String.class, "searchProdStatus", false, "searchProdStatus");
        public final static Property SearchProdStartLow = new Property(7, String.class, "searchProdStartLow", false, "searchProdStartLow");
        public final static Property SearchProdStartTop = new Property(8, String.class, "searchProdStartTop", false, "searchProdStartTop");
        public final static Property SearchFFType = new Property(9, String.class, "searchFFType", false, "searchFFType");
        public final static Property SearchFFTop = new Property(10, String.class, "searchFFTop", false, "searchFFTop");
        public final static Property SearchFFLow = new Property(11, String.class, "searchFFLow", false, "searchFFLow");
        public final static Property SearchProdTimeStart = new Property(12, String.class, "searchProdTimeStart", false, "searchProdTimeStart");
        public final static Property SearchProdTimeEnd = new Property(13, String.class, "searchProdTimeEnd", false, "searchProdTimeEnd");
        public final static Property SearchProdPreference = new Property(14, String.class, "searchProdPreference", false, "searchProdPreference");
        public final static Property SalesId = new Property(15, Long.class, "salesId", false, "salesId");
        public final static Property SearchProdId = new Property(16, String.class, "searchProdId", false, "searchProdId");
        public final static Property SearchSalesLike = new Property(17, String.class, "searchSalesLike", false, "searchSalesLike");
        public final static Property SearchProdInvest = new Property(18, String.class, "searchProdInvest", false, "searchProdInvest");
        public final static Property SearchOverDue = new Property(19, String.class, "searchOverDue", false, "searchOverDue");
        public final static Property SearchProdTop = new Property(20, String.class, "searchProdTop", false, "searchProdTop");
        public final static Property SortDesc = new Property(21, String.class, "sortDesc", false, "sortDesc");
        public final static Property SortProdOnDateTime = new Property(22, String.class, "sortProdOnDateTime", false, "sortProdOnDateTime");
        public final static Property SortProdYieldFixed = new Property(23, String.class, "sortProdYieldFixed", false, "sortProdYieldFixed");
        public final static Property SortProdCommissionBase = new Property(24, String.class, "sortProdCommissionBase", false, "sortProdCommissionBase");
        public final static Property SortProdTime = new Property(25, String.class, "sortProdTime", false, "sortProdTime");
        public final static Property SortProdSize = new Property(26, String.class, "sortProdSize", false, "sortProdSize");
        public final static Property SortHot = new Property(27, String.class, "sortHot", false, "sortHot");
        public final static Property PageNow = new Property(28, Integer.class, "pageNow", false, "pageNow");
        public final static Property PageStart = new Property(29, Integer.class, "pageStart", false, "pageStart");
        public final static Property PageSize = new Property(30, Integer.class, "pageSize", false, "pageSize");
    };


    public EProductSearchDao(DaoConfig config) {
        super(config);
    }
    
    public EProductSearchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EPRODUCT_SEARCH' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'searchProdName' TEXT," + // 1: searchProdName
                "'searchProdOnDateTime' TEXT," + // 2: searchProdOnDateTime
                "'searchProdEnDateTime' TEXT," + // 3: searchProdEnDateTime
                "'searchProdFirstType' TEXT," + // 4: searchProdFirstType
                "'searchProdSecondtype' TEXT," + // 5: searchProdSecondtype
                "'searchProdStatus' TEXT," + // 6: searchProdStatus
                "'searchProdStartLow' TEXT," + // 7: searchProdStartLow
                "'searchProdStartTop' TEXT," + // 8: searchProdStartTop
                "'searchFFType' TEXT," + // 9: searchFFType
                "'searchFFTop' TEXT," + // 10: searchFFTop
                "'searchFFLow' TEXT," + // 11: searchFFLow
                "'searchProdTimeStart' TEXT," + // 12: searchProdTimeStart
                "'searchProdTimeEnd' TEXT," + // 13: searchProdTimeEnd
                "'searchProdPreference' TEXT," + // 14: searchProdPreference
                "'salesId' INTEGER," + // 15: salesId
                "'searchProdId' TEXT," + // 16: searchProdId
                "'searchSalesLike' TEXT," + // 17: searchSalesLike
                "'searchProdInvest' TEXT," + // 18: searchProdInvest
                "'searchOverDue' TEXT," + // 19: searchOverDue
                "'searchProdTop' TEXT," + // 20: searchProdTop
                "'sortDesc' TEXT," + // 21: sortDesc
                "'sortProdOnDateTime' TEXT," + // 22: sortProdOnDateTime
                "'sortProdYieldFixed' TEXT," + // 23: sortProdYieldFixed
                "'sortProdCommissionBase' TEXT," + // 24: sortProdCommissionBase
                "'sortProdTime' TEXT," + // 25: sortProdTime
                "'sortProdSize' TEXT," + // 26: sortProdSize
                "'sortHot' TEXT," + // 27: sortHot
                "'pageNow' INTEGER," + // 28: pageNow
                "'pageStart' INTEGER," + // 29: pageStart
                "'pageSize' INTEGER);"); // 30: pageSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EPRODUCT_SEARCH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EProductSearch entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String searchProdName = entity.getSearchProdName();
        if (searchProdName != null) {
            stmt.bindString(2, searchProdName);
        }
 
        String searchProdOnDateTime = entity.getSearchProdOnDateTime();
        if (searchProdOnDateTime != null) {
            stmt.bindString(3, searchProdOnDateTime);
        }
 
        String searchProdEnDateTime = entity.getSearchProdEnDateTime();
        if (searchProdEnDateTime != null) {
            stmt.bindString(4, searchProdEnDateTime);
        }
 
        String searchProdFirstType = entity.getSearchProdFirstType();
        if (searchProdFirstType != null) {
            stmt.bindString(5, searchProdFirstType);
        }
 
        String searchProdSecondtype = entity.getSearchProdSecondtype();
        if (searchProdSecondtype != null) {
            stmt.bindString(6, searchProdSecondtype);
        }
 
        String searchProdStatus = entity.getSearchProdStatus();
        if (searchProdStatus != null) {
            stmt.bindString(7, searchProdStatus);
        }
 
        String searchProdStartLow = entity.getSearchProdStartLow();
        if (searchProdStartLow != null) {
            stmt.bindString(8, searchProdStartLow);
        }
 
        String searchProdStartTop = entity.getSearchProdStartTop();
        if (searchProdStartTop != null) {
            stmt.bindString(9, searchProdStartTop);
        }
 
        String searchFFType = entity.getSearchFFType();
        if (searchFFType != null) {
            stmt.bindString(10, searchFFType);
        }
 
        String searchFFTop = entity.getSearchFFTop();
        if (searchFFTop != null) {
            stmt.bindString(11, searchFFTop);
        }
 
        String searchFFLow = entity.getSearchFFLow();
        if (searchFFLow != null) {
            stmt.bindString(12, searchFFLow);
        }
 
        String searchProdTimeStart = entity.getSearchProdTimeStart();
        if (searchProdTimeStart != null) {
            stmt.bindString(13, searchProdTimeStart);
        }
 
        String searchProdTimeEnd = entity.getSearchProdTimeEnd();
        if (searchProdTimeEnd != null) {
            stmt.bindString(14, searchProdTimeEnd);
        }
 
        String searchProdPreference = entity.getSearchProdPreference();
        if (searchProdPreference != null) {
            stmt.bindString(15, searchProdPreference);
        }
 
        Long salesId = entity.getSalesId();
        if (salesId != null) {
            stmt.bindLong(16, salesId);
        }
 
        String searchProdId = entity.getSearchProdId();
        if (searchProdId != null) {
            stmt.bindString(17, searchProdId);
        }
 
        String searchSalesLike = entity.getSearchSalesLike();
        if (searchSalesLike != null) {
            stmt.bindString(18, searchSalesLike);
        }
 
        String searchProdInvest = entity.getSearchProdInvest();
        if (searchProdInvest != null) {
            stmt.bindString(19, searchProdInvest);
        }
 
        String searchOverDue = entity.getSearchOverDue();
        if (searchOverDue != null) {
            stmt.bindString(20, searchOverDue);
        }
 
        String searchProdTop = entity.getSearchProdTop();
        if (searchProdTop != null) {
            stmt.bindString(21, searchProdTop);
        }
 
        String sortDesc = entity.getSortDesc();
        if (sortDesc != null) {
            stmt.bindString(22, sortDesc);
        }
 
        String sortProdOnDateTime = entity.getSortProdOnDateTime();
        if (sortProdOnDateTime != null) {
            stmt.bindString(23, sortProdOnDateTime);
        }
 
        String sortProdYieldFixed = entity.getSortProdYieldFixed();
        if (sortProdYieldFixed != null) {
            stmt.bindString(24, sortProdYieldFixed);
        }
 
        String sortProdCommissionBase = entity.getSortProdCommissionBase();
        if (sortProdCommissionBase != null) {
            stmt.bindString(25, sortProdCommissionBase);
        }
 
        String sortProdTime = entity.getSortProdTime();
        if (sortProdTime != null) {
            stmt.bindString(26, sortProdTime);
        }
 
        String sortProdSize = entity.getSortProdSize();
        if (sortProdSize != null) {
            stmt.bindString(27, sortProdSize);
        }
 
        String sortHot = entity.getSortHot();
        if (sortHot != null) {
            stmt.bindString(28, sortHot);
        }
 
        Integer pageNow = entity.getPageNow();
        if (pageNow != null) {
            stmt.bindLong(29, pageNow);
        }
 
        Integer pageStart = entity.getPageStart();
        if (pageStart != null) {
            stmt.bindLong(30, pageStart);
        }
 
        Integer pageSize = entity.getPageSize();
        if (pageSize != null) {
            stmt.bindLong(31, pageSize);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EProductSearch readEntity(Cursor cursor, int offset) {
        EProductSearch entity = new EProductSearch( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // searchProdName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // searchProdOnDateTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // searchProdEnDateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // searchProdFirstType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // searchProdSecondtype
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // searchProdStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // searchProdStartLow
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // searchProdStartTop
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // searchFFType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // searchFFTop
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // searchFFLow
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // searchProdTimeStart
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // searchProdTimeEnd
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // searchProdPreference
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // salesId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // searchProdId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // searchSalesLike
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // searchProdInvest
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // searchOverDue
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // searchProdTop
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // sortDesc
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // sortProdOnDateTime
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // sortProdYieldFixed
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // sortProdCommissionBase
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // sortProdTime
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // sortProdSize
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // sortHot
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // pageNow
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // pageStart
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30) // pageSize
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EProductSearch entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSearchProdName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSearchProdOnDateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSearchProdEnDateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSearchProdFirstType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSearchProdSecondtype(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSearchProdStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSearchProdStartLow(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSearchProdStartTop(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSearchFFType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSearchFFTop(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSearchFFLow(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSearchProdTimeStart(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSearchProdTimeEnd(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSearchProdPreference(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSalesId(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setSearchProdId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSearchSalesLike(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSearchProdInvest(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSearchOverDue(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSearchProdTop(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSortDesc(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSortProdOnDateTime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSortProdYieldFixed(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSortProdCommissionBase(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSortProdTime(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSortProdSize(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSortHot(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPageNow(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setPageStart(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setPageSize(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EProductSearch entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EProductSearch entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
