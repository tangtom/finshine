package com.finshine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.finshine.dao.EAdvertisement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EADVERTISEMENT.
*/
public class EAdvertisementDao extends AbstractDao<EAdvertisement, Long> {

    public static final String TABLENAME = "EADVERTISEMENT";

    /**
     * Properties of entity EAdvertisement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdvertisementId = new Property(1, Long.class, "advertisementId", false, "advertisementId");
        public final static Property ArticleId = new Property(2, Long.class, "articleId", false, "articleId");
        public final static Property ImageAd = new Property(3, String.class, "imageAd", false, "imageAd");
        public final static Property Created = new Property(4, java.util.Date.class, "created", false, "created");
        public final static Property Lastmod = new Property(5, java.util.Date.class, "lastmod", false, "lastmod");
        public final static Property Status = new Property(6, String.class, "status", false, "status");
    };


    public EAdvertisementDao(DaoConfig config) {
        super(config);
    }
    
    public EAdvertisementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EADVERTISEMENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'advertisementId' INTEGER," + // 1: advertisementId
                "'articleId' INTEGER," + // 2: articleId
                "'imageAd' TEXT," + // 3: imageAd
                "'created' INTEGER," + // 4: created
                "'lastmod' INTEGER," + // 5: lastmod
                "'status' TEXT);"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EADVERTISEMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EAdvertisement entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long advertisementId = entity.getAdvertisementId();
        if (advertisementId != null) {
            stmt.bindLong(2, advertisementId);
        }
 
        Long articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindLong(3, articleId);
        }
 
        String imageAd = entity.getImageAd();
        if (imageAd != null) {
            stmt.bindString(4, imageAd);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(5, created.getTime());
        }
 
        java.util.Date lastmod = entity.getLastmod();
        if (lastmod != null) {
            stmt.bindLong(6, lastmod.getTime());
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EAdvertisement readEntity(Cursor cursor, int offset) {
        EAdvertisement entity = new EAdvertisement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // advertisementId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // articleId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageAd
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // created
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // lastmod
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EAdvertisement entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdvertisementId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setArticleId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setImageAd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreated(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setLastmod(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EAdvertisement entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EAdvertisement entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
