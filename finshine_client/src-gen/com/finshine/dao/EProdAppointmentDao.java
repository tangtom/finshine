package com.finshine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.finshine.dao.EProdAppointment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EPROD_APPOINTMENT.
*/
public class EProdAppointmentDao extends AbstractDao<EProdAppointment, Long> {

    public static final String TABLENAME = "EPROD_APPOINTMENT";

    /**
     * Properties of entity EProdAppointment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProdAppointmentId = new Property(1, Long.class, "prodAppointmentId", false, "prodAppointmentId");
        public final static Property Created = new Property(2, java.util.Date.class, "created", false, "created");
        public final static Property Lastmod = new Property(3, java.util.Date.class, "lastmod", false, "lastmod");
        public final static Property Version = new Property(4, Long.class, "version", false, "version");
        public final static Property SalesId = new Property(5, Long.class, "salesId", false, "salesId");
        public final static Property ProdId = new Property(6, Long.class, "prodId", false, "prodId");
        public final static Property ProdQty = new Property(7, Integer.class, "prodQty", false, "prodQty");
        public final static Property ProdAmount = new Property(8, Float.class, "prodAmount", false, "prodAmount");
    };


    public EProdAppointmentDao(DaoConfig config) {
        super(config);
    }
    
    public EProdAppointmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EPROD_APPOINTMENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'prodAppointmentId' INTEGER," + // 1: prodAppointmentId
                "'created' INTEGER," + // 2: created
                "'lastmod' INTEGER," + // 3: lastmod
                "'version' INTEGER," + // 4: version
                "'salesId' INTEGER," + // 5: salesId
                "'prodId' INTEGER," + // 6: prodId
                "'prodQty' INTEGER," + // 7: prodQty
                "'prodAmount' REAL);"); // 8: prodAmount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EPROD_APPOINTMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EProdAppointment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long prodAppointmentId = entity.getProdAppointmentId();
        if (prodAppointmentId != null) {
            stmt.bindLong(2, prodAppointmentId);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(3, created.getTime());
        }
 
        java.util.Date lastmod = entity.getLastmod();
        if (lastmod != null) {
            stmt.bindLong(4, lastmod.getTime());
        }
 
        Long version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(5, version);
        }
 
        Long salesId = entity.getSalesId();
        if (salesId != null) {
            stmt.bindLong(6, salesId);
        }
 
        Long prodId = entity.getProdId();
        if (prodId != null) {
            stmt.bindLong(7, prodId);
        }
 
        Integer prodQty = entity.getProdQty();
        if (prodQty != null) {
            stmt.bindLong(8, prodQty);
        }
 
        Float prodAmount = entity.getProdAmount();
        if (prodAmount != null) {
            stmt.bindDouble(9, prodAmount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EProdAppointment readEntity(Cursor cursor, int offset) {
        EProdAppointment entity = new EProdAppointment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // prodAppointmentId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // created
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // lastmod
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // version
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // salesId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // prodId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // prodQty
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8) // prodAmount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EProdAppointment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProdAppointmentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCreated(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setLastmod(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setVersion(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSalesId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setProdId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setProdQty(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setProdAmount(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EProdAppointment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EProdAppointment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
